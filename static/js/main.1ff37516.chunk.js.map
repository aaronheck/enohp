{"version":3,"sources":["logic/recording-storage.js","component/Record.js","component/Player.js","component/Waveform.js","component/Step.js","component/ListenAndGuessStep.js","component/ShareStep.js","component/Game.js","logic/record-util.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getAudioFile","async","id","res","fetch","method","getPresignedGetUrl","presignedUrl","json","url","saveAudioFile","audioBlob","body","sendAudioFile","file","headers","key","Record","React","Component","constructor","arguments","state","isRecording","handleClick","console","log","this","props","audioRecorder","stop","onStop","x","start","onStart","setState","prevState","handleRecordClick","componentDidMount","setTriggerRecord","render","createElement","class","onClick","toWav","require","Player","count","setCount","useState","playedPercentage","setPlayedPercentage","processedBlob","setProcessedBlob","audio","setAudio","duration","setDuration","playbackSpeed","setPlaybackSpeed","playbackSpeedClicks","setPlaybackSpeedClicks","blob","playBackards","onRecordAgain","hideRecordAgain","rest","PLAYBACK_SPEEDS","play","onEnd","window","URL","createObjectURL","newAudio","Audio","playbackRate","autoplay","onended","progressBarUpdateInterval","setInterval","paused","clearInterval","currentTime","pause","useEffect","context","AudioContext","decodeAudioData","arrayBuffer","buffer","createBufferSource","i","numberOfChannels","Array","prototype","reverse","call","getChannelData","wav","Blob","DataView","type","processAudio","test","navigator","userAgent","e","style","width","left","src","length","Waveform","canvasRef","useRef","canvas","current","height","getContext","interval","draw","ctx","sectionAmplitude","getSectionAmplitude","lineWidth","strokeStyle","beginPath","globalCompositeOperation","drawImage","y","Math","max","save","fillStyle","fillRect","restore","clearRect","ref","Step","recordingComplete","recordingStarted","onStepCompletion","triggerRecord","showRecord","className","text","subtext","display","playBackwards","ListenAndGuessStep","inputValue","getAudioFileInternal","URLSearchParams","location","search","get","updateInputValue","evt","val","target","value","onChange","ShareStep","buttonText","saveAndCopyUrl","blobToSave","origin","clipboard","writeText","share","color","cursor","Game","forwardsBlob","backwardsBlob","step","seedId","newId","guess","analyzer","mediaRecorder","constraints","stream","mediaDevices","getUserMedia","audioContent","audioStream","createMediaStreamSource","createAnalyser","connect","fftSize","MediaRecorder","err","_navigator$mediaDevic","alert","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","getMediaRecorder","sectionAmplitudeCallback","dataArray","Float32Array","ondataavailable","getFloatTimeDomainData","push","data","onstop","reduce","a","b","abs","AudioRecorder","then","concat","showShare","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1ff37516.chunk.js","sourcesContent":["const getPresignedPutUrl = () => {\n    return fetch('https://b7tfgad8z3.execute-api.us-east-2.amazonaws.com/test/recording', {\n        method: 'POST',\n    });\n};\n\nconst getPresignedGetUrl = (id) => {\n    return fetch('https://b7tfgad8z3.execute-api.us-east-2.amazonaws.com/test/recording?id=' + id, {\n        method: 'GET',\n    });\n};\n\nconst sendAudioFile = (url, file) => {\n    // const formData = new FormData();\n    // formData.append('audio-file', file);\n    return fetch(url, {\n        method: 'PUT',\n        headers: {\n            \"Content-Type\": \"audio/wav\",\n        },\n        body: file\n    });\n};\n\nconst getAudioFileWithSignedUrl = (url) => {\n    return fetch(url, {\n        method: 'GET',\n    });\n};\n\n\n// returns generated file id\nasync function saveAudioFile(audioBlob) {\n    let res  = await getPresignedPutUrl();\n    let body = await res.json();\n    let presignedUrl = body.url;    \n    await sendAudioFile(presignedUrl, audioBlob);\n    return body.key;\n}\n\nasync function getAudioFile(id) {\n    let res  = await getPresignedGetUrl(id);\n    let body = await res.json();\n    let presignedUrl = body.url;    \n    let file = await getAudioFileWithSignedUrl(presignedUrl);\n    return file;\n}\n\nmodule.exports = {\n    getAudioFile, saveAudioFile\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Record.css\";\n\n\nexport default class Record extends React.Component {\n  static propTypes = {\n    audioRecorder: PropTypes.object,\n    onStart: PropTypes.func,\n    onStop: PropTypes.func,\n    sectionAmplitudeCallback: PropTypes.func\n  };\n\n  state = {\n    isRecording: false\n  };\n\n  handleClick = async buttonName => {\n    console.log(this.state);\n    // stops recording if recording\n    if(this.state.isRecording) {\n      (await this.props.audioRecorder).stop(this.props.onStop);\n    } else {\n      // start recording.\n      var x = (await this.props.audioRecorder);\n      console.log(x);\n      x.start();\n      this.props.onStart();\n    }\n    this.setState(prevState => ({\n      isRecording: !prevState.isRecording\n    }));\n    this.props.handleRecordClick && this.props.handleRecordClick();\n    console.log(this.state);\n  };\n\n  componentDidMount() {\n    this.props.setTriggerRecord(this.handleClick);\n  }\n\n\n  render() {\n    return (\n      <span>\n        <span class=\"record-button\" onClick={this.handleClick}>\n          <span class={\"transition inner \" + (this.state.isRecording ? 'stop' : 'start')}></span>\n        </span>\n      </span>\n    );\n  }\n}","import React, { useState, useEffect, useCallback } from \"react\";\nimport saveAudioFile from \"../logic/recording-storage\";\n\nvar toWav = require(\"audiobuffer-to-wav\");\n\nfunction Player(props) {\n  const [count, setCount] = useState(0);\n  const [playedPercentage, setPlayedPercentage] = useState(0);\n  const [processedBlob, setProcessedBlob] = useState(null);\n  const [audio, setAudio] = useState(null);\n  const [duration, setDuration] = useState(0);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n  const [playbackSpeedClicks, setPlaybackSpeedClicks] = useState(0);\n  const { blob, playBackards, onRecordAgain,hideRecordAgain, ...rest } = props;\n  const PLAYER_WIDTH = 350;\n  const CURRENT_MARKER_OFFSET = 4;\n  const PLAYBACK_SPEEDS = [0.5, 1];\n\n  async function play(onEnd) {\n  \tstop();\n  \tvar url = window.URL.createObjectURL(processedBlob);\n  \tvar newAudio = new Audio(url)\n    setAudio(newAudio);\n\n    newAudio.playbackRate = playbackSpeed;\n    newAudio.autoplay = true;\n    newAudio.onended = onEnd;\n\n\tvar progressBarUpdateInterval = setInterval(function () {\n\t\tif(newAudio.paused) {\n\t\t\tclearInterval(progressBarUpdateInterval);\n\t\t}\n\t  setPlayedPercentage(newAudio.currentTime * 100 / duration);\n\t}, 10);\n    await newAudio.play();\n  }\n\n  function stop() {\n  \tif(audio) {\n  \t\taudio.pause();\n  \t\taudio.currentTime = 0;\n  \t}\n  }\n\n  function recordAgain() {\n  \tstop();\n  \tprops.onRecordAgain && props.onRecordAgain();\n  }\n\n  async function processAudio() {\n    var context = new AudioContext();\n    context.decodeAudioData(\n      await props.blob.arrayBuffer(),\n      async function (buffer) {\n        var source = context.createBufferSource();\n        for (var i = 0; i < buffer.numberOfChannels; i++) {\n          if(props.playBackards || true) {\n          \tArray.prototype.reverse.call(buffer.getChannelData(i));\n          } \n        }\n        setDuration(buffer.duration);\n        var wav = toWav(buffer);\n        var blob = new window.Blob([new DataView(wav)], {\n          type: \"audio/wav\",\n        });\n        setProcessedBlob(blob); \n      }\n    );\n  }\n\n  useEffect(() => {\n    processAudio();\n  }, [props.blob]);\n\n  // Auto play when receive new blob for not safari.\n  useEffect(() => {\n  \tif(processedBlob) {\n  \t\ttry {\n        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n        if(!isSafari) {\n          play();\n        }\n      } catch (e) {\n        \n      }\n  \t}    \n  }, [processedBlob]);\n\n  function getCurrentLocation() {\n  \treturn PLAYER_WIDTH * (playedPercentage / 100) - CURRENT_MARKER_OFFSET;\n  }\n\n  function playbackSpeedClick() {\n  \tsetPlaybackSpeedClicks(playbackSpeedClicks+1);\n  \tsetPlaybackSpeed(PLAYBACK_SPEEDS[playbackSpeedClicks % PLAYBACK_SPEEDS.length]);\n\n  }\n\n  return (\n  \t<div>\n\t    <div class=\"player\">\n\t      <div class=\"unplayed\"></div>\n\t      <div class=\"played\" style={{width: (playedPercentage) + \"%\"}}></div>\n\t      <div class=\"current\" style={{left: getCurrentLocation()}}></div>\n\t    </div>\n\t    <div class=\"player-controls\">\n\t    \t{!hideRecordAgain && <div class=\"button-and-label\" >\n\t    \t\t<div class=\"secondary-player-button\" onClick={recordAgain}><div class=\"small-record\"></div></div>\n\t    \t\t<span class=\"button-label\">Record Again</span>\n\t    \t</div>\n        }\n\t    \t<div class=\"button-and-label\">\n\t    \t\t<div class=\"play\" onClick={play}><img src=\"/play.svg\" /></div>\n\t    \t\t<span class=\"button-label\">Play in reverse</span>\n\t    \t</div>\n\t    \t<div class=\"button-and-label\">\n\t    \t\t<div class=\"secondary-player-button\" onClick={playbackSpeedClick}>{playbackSpeed + \"x\"}</div>\n\t    \t\t<span class=\"button-label\">Speed</span>\n\t    \t</div>\n\t    </div>\n\t    \n    </div>\n  );\n}\n\nexport default Player;\n","import React, { useRef, useEffect } from 'react'\n\nconst Waveform = props => {\n  \n  const { audioRecorder, isRecording, ...rest } = props\n  const canvasRef = useRef(null)\n  useEffect(() => {\n    \n    const canvas = canvasRef.current\n    canvas.width = 200;\n    canvas.height = 25;\n    const context = canvas.getContext('2d')\n    let frameCount = 0\n\n    const draw = () => {\n    \tif(isRecording) {\n\t    \tlet ctx = context;\n\t    \tlet sectionAmplitude = 0;\n\t    \tif(audioRecorder) {\n\t      \t\tsectionAmplitude = audioRecorder.getSectionAmplitude();\n\t     \t}\n\t      \tctx.lineWidth = 1;\n\t      \tctx.strokeStyle = 'rgb(0, 0, 0)';\n\t\t    ctx.beginPath();\n\t\t    var sliceWidth = 1;\n\t\t    \n\t\t    // shift \n\t\t    var sizeOfShift = -4\n\t\t    ctx.globalCompositeOperation = \"copy\";\n\t\t\tctx.drawImage(ctx.canvas, sizeOfShift, 0);\n\t\t\tctx.globalCompositeOperation = \"source-over\"\n\n\t\t\t// Cut the amplitude in half and make the min amplitude 2px;\n\t\t    var y = Math.max(sectionAmplitude * 0.5, 2);\n\n\t\t    ctx.save();\n\t\t    ctx.fillStyle='rgb(0, 0, 0)';\n\t\t    ctx.fillRect(canvas.width - 5, // write newest bar near end of canvas (x axis)\n\t\t    \t(canvas.height - y) / 2, // start the bar from the center - half amplitude\n\t\t    \tsliceWidth, // the bar should be this wide\n\t\t    \ty); // bar should be this tall\n\n\t\t    ctx.restore();\n\t\t} else {\n\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t}\n\t  }\n\t  const interval = setInterval(draw, 100);\n\n\n    const render = () => {\n      frameCount++      \n    }\n    render()\n    \n    return () => {\n      clearInterval(interval);\n    }\n  }, [isRecording])\n  \n  return <canvas id=\"waveform\" ref={canvasRef}/>\n}\n\nexport default Waveform","import Record from \"./Record\";\nimport Player from \"./Player\";\nimport Waveform from \"./Waveform\";\n// import Playback from \"./Playback\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Record.css\";\nimport saveAudioFile from \"../logic/recording-storage\";\n\nexport default class Step extends React.Component {\n  // Step Completion should be a callback.\n  static propTypes = {\n    audioRecorder: PropTypes.object,\n    text: PropTypes.string,\n    subtext: PropTypes.string,\n    buttonClick: PropTypes.func,\n    onStepCompletion: PropTypes.func,\n    playBackwards: PropTypes.bool,\n  };\n\n  state = {\n    recordingComplete: false,\n    blob: null,\n    recordingStarted: false,\n    isRecording: false,\n  };\n\n  onStop = async blob => {\n    this.setState(prevState => ({\n      recordingComplete: true,\n      blob: blob,\n      isRecording: false,\n    }));\n   this.props.onStepCompletion && this.props.onStepCompletion(blob);\n  };\n\n  onStart = () => {\n    this.setState(prevState => ({\n      recordingStarted: true,\n      isRecording: true\n    }));\n  };\n\n  onRecordAgain = () => {\n    this.setState(prevState => ({\n      recordingComplete: false,\n      // blob: null,\n      // isRecording: true\n    }));\n    this.triggerRecord();\n  };\n\n  render() { \n    let showRecord = this.props.audioRecorder && (!this.state.recordingComplete || this.state.isRecording);\n    return (\n      <div className={this.props.className + \" step\"}>\n      \t<h3>{this.props.text}</h3>\n        {this.props.subtext && <span className=\"subtext\">{this.props.subtext}</span>}\n        <Waveform audioRecorder={this.props.audioRecorder} isRecording={this.state.isRecording} />\n        {!this.state.recordingStarted && <span style={{ 'padding-bottom': '15px'}}>Click to start recording...</span>}\n        {/* Not needed? */}\n        {/* {this.recordingComplete && <Player blob={this.state.blob} />} */}\n        <div  style={{ display: showRecord ? 'block' : 'none' }}>\n          <Record \n            onStart={this.onStart} \n            onStop={this.onStop} \n            audioRecorder={this.props.audioRecorder}\n            setTriggerRecord={triggerRecord => this.triggerRecord = triggerRecord}/>\n        </div>\n        {this.state.recordingComplete && <Player blob={this.state.blob} playBackwards={true} onRecordAgain={this.onRecordAgain} />}\n      </div>\n\n    );\n  }\n}","import Record from \"./Record\";\nimport Player from \"./Player\";\nimport Waveform from \"./Waveform\";\n// import Playback from \"./Playback\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Record.css\";\nimport { getAudioFile } from \"../logic/recording-storage\";\n\nexport default class ListenAndGuessStep extends React.Component {\n    // Step Completion should be a callback.\n    static propTypes = {\n        audioRecorder: PropTypes.object,\n        text: PropTypes.string,\n        subtext: PropTypes.string,\n        buttonClick: PropTypes.func,\n        blob: PropTypes.object,\n        onStepCompletion: PropTypes.func,\n        playBackwards: PropTypes.bool,\n        id: PropTypes.string\n    };\n\n    state = {\n        recordingComplete: false,\n        blob: null,\n        recordingStarted: false,\n        isRecording: false,\n        inputValue: ''\n    };\n\n    componentDidMount() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const id = urlParams.get('id');\n        this.getAudioFileInternal(id);\n    }\n\n    getAudioFileInternal = async (id) => {\n        let file = await getAudioFile(id);\n        let blob = await file.blob();\n        this.setState({ blob: blob });\n    };\n\n    updateInputValue(evt) {\n        const val = evt.target.value;\n        this.setState({\n          inputValue: val\n        });\n      }\n\n    render() {\n        return (\n            <div className={this.props.className + \" step\"}>\n                <h3>{this.props.text}</h3>\n                {this.props.subtext && <span className=\"subtext\">{this.props.subtext}</span>}\n                {!this.state.recordingStarted && <span style={{ 'padding-bottom': '15px' }}></span>}\n                {this.state.blob && <Player blob={this.state.blob} playBackwards={true} hideRecordAgain={true} />}\n                <input type=\"text\" style={{ 'margin-top': '25px' }} value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)}/>\n                <input type=\"submit\" value=\"Guess\" onClick={() => { this.props.onStepCompletion(this.state.inputValue) }} />\n            </div>\n\n        );\n    }\n}","\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Record.css\";\nimport {saveAudioFile} from \"../logic/recording-storage\";\n\n\nexport default class ShareStep extends React.Component {\n  // Step Completion should be a callback.\n  static propTypes = {\n    text: PropTypes.string,\n    subtext: PropTypes.string,\n    blobToSave: PropTypes.any\n  };\n\n  state = {\n    buttonText: \"Copy Link to Send\",\n    url: null\n  };\n  \n  saveAndCopyUrl = async () => {\n    this.setState({buttonText: \"Copying...\"});\n    let id = await saveAudioFile(this.props.blobToSave);\n    let url = window.location.origin + '?id=' + id;\n    navigator.clipboard.writeText(url);\n    this.setState({buttonText: \"Copied!\", url: url});\n    navigator.share({url:url})\n  };\n\n  render() { \n    return (\n      <div className={this.props.className + \" step\"}>\n      \t<h3>{this.props.text}</h3>\n        {this.props.subtext && <span className=\"subtext\">{this.props.subtext}</span>}\n        <div onClick={this.saveAndCopyUrl} \n            style={{color:'blue', cursor: 'pointer'}}>\n                {this.state.buttonText}\n        </div>\n        {this.state.url != null && this.state.url}\n      </div>\n\n    );\n  }\n}","import Step from './Step'\nimport ListenAndGuessStep from './ListenAndGuessStep'\nimport ShareStep from './ShareStep'\nimport React from 'react';\nimport AudioRecorder from \"../logic/record-util\"; \n\nexport default class Game extends React.Component {\n  state = {\n  \tforwardsBlob: null,\n    backwardsBlob: null,\n  \tstep: 0,\n    audioRecorder: null,\n    seedId: null,\n    newId: null,\n    blobToSave: null,\n    guess: \"\"\n  };\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search);\n    const id = urlParams.get('id');\n    var audioRecorder = AudioRecorder();\n    audioRecorder.then(a => this.setState({audioRecorder: a, seedId: id}));\n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header steps\">\n      <ListenAndGuessStep text=\"Step 1: What do you think your friend is saying?\"\n                  subtext=\"Reversed audio of backwards speaking.\"\n        \t  audioRecorder={this.state.audioRecorder}\n            id={this.state.seedId}\n            buttonText=\"Ok Sounds Good\"\n            onStepCompletion={(guess)=>{\n              this.setState({step:1, guess});\n              \n            }} />\n        <Step className={this.state.step < 1 ? \"hidden\" : \"nope\"}\n            text={`Step 2: Say '${this.state.guess}' Forwards`}\n          audioRecorder={this.state.audioRecorder}\n            blob={this.state.forwardsBlob}\n          buttonText=\"Ok Sounds Good\"\n          onStepCompletion={()=>{this.setState({step:2})}} />\n       \t<Step className={this.state.step < 2 ? \"hidden\" : \"nope\"}\n            text={`Step 3: Say '${this.state.guess}' Backwards`}\n            audioRecorder={this.state.audioRecorder}\n              blob={this.state.forwardsBlob}\n            buttonText=\"Ok Sounds Good\"\n            showShare={true}\n            subtext=\"Try to mimic the reversed audio from the previous step.\"\n            onStepCompletion={(blob)=>{this.setState({step:3, blobToSave:blob})}} />\n          <ShareStep className={this.state.step < 3 ? \"hidden\" : \"nope\"} text=\"Send it on.\"\n                  subtext=\"Keep the game going and send a link to the next person.\"\n        \t  audioRecorder={this.state.audioRecorder}\n            blobToSave={this.state.blobToSave} />\n      </header>\n    </div>\n    );\n  }\n}\n\n// 1. Record Forwards & Listen Backwards\n// 2. Listen Backwards & Record Backwards\n// 3. Listen Backwards Reversed & Submit"," export default async function AudioRecorder() {\n    \tlet buffer = []\n\n        let analyzer = null;\n\t\tconst mediaRecorder = await getMediaRecorder();\n\n\t    async function getMediaRecorder(constraints) {\n\t        try {\n\t\t\t\tconsole.log(\"asking\");\n\t\t\t\t// navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia ||\n\t\t\t\t// navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.mediaDevices.getUserMedia;\n\t            let stream = await navigator.mediaDevices.getUserMedia({audio: true});\n                console.log(\"granted\");\n\t\t\t\tlet audioContent = new AudioContext();\n                let audioStream = audioContent.createMediaStreamSource( stream );\n                analyzer = audioContent.createAnalyser();\n                audioStream.connect(analyzer);\n                analyzer.fftSize = 1024;\n\t            return new MediaRecorder(stream);\n\t            /* use the stream */\n\t        } catch (err) {\n\t            /* handle the error */\n\t\t\t\t// alert(\"E: \");\n\t\t\t\talert(\"e\");\n\t\t\t\tnavigator.getUserMedia = ( navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.mediaDevices?.getUserMedia);\n\t\t\t\talert(\"E: \" + navigator.getUserMedia);\n\n\t\t\t\t// alert(err);\n\t        }\n\t    }\n\n\t    function isRecording() {\n\t    \treturn mediaRecorder.state === 'recording';\n\t    }\n        var d = []\n\n    \tfunction start(sectionAmplitudeCallback) {\n    \t\tif(isRecording()) {\n    \t\t\treturn false;\t\n    \t\t}\n    \t\tbuffer = []\n            var dataArray = new Float32Array(analyzer.fftSize);\n\n    \t\tmediaRecorder.ondataavailable = function(e) {\n             analyzer.getFloatTimeDomainData(dataArray)\n             var max  = 0;\n            // for (var i = 0 ; i < dataArray.length; i++) {\n            //     max = Math.abs(Math.max(Math.abs(dataArray[0], max)));\n            // }\n            // console.log(max * 200);\n            // d.push(max * 200)\n            // console.log(200 * dataArray.reduce((a, b) => Math.abs(a) + Math.abs(b)) / dataArray.length)\n    \t\t buffer.push(e.data);\n    \t\t}\n            mediaRecorder.start();\n    \t}\n\n        function getSectionAmplitude() {\n            if(!isRecording()) {\n                return 0;\n            }\n            var dataArray = new Float32Array(analyzer.fftSize);\n            analyzer.getFloatTimeDomainData(dataArray);\n            return 200 * dataArray.reduce((a, b) => Math.abs(a) + Math.abs(b)) / dataArray.length;\n        }\n\n    \tfunction stop(onStop) {\n    \t\tmediaRecorder.onstop = async (e) => {\n    \t\t\tconst blob = new Blob(buffer, { 'type' : 'audio/ogg; codecs=opus' });\n  \t\t\t\tonStop(blob);\n    \t\t};\n    \t\tmediaRecorder.stop();\n    \t}\n\n    \treturn {\n    \t\tisRecording,\n    \t\tstart,\n    \t\tstop,\n            getSectionAmplitude\n    \t};\n    }","import Game from './component/Game'\nimport React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}